{"version":3,"sources":["components/Form/styles.js","components/Form/index.js","components/Table/styles.js","components/Table/index.js","container/Calculator/styles.js","container/Calculator/index.js","styles.js","App.js","reportWebVitals.js","index.js"],"names":["Container","styled","div","InnerContainer","Item","Label","label","Input","input","CurrencyInput","SuffixInput","props","suffix","padding","length","PrefixInput","Form","price","invocations","memory","execution","lifespan","salary","updateValue","htmlFor","id","type","min","value","onChange","e","target","step","toString","max","onBlur","parseInt","Inner","Column","rows","i","count","LeftColumn","TimingColumn","LeftLabel","span","Spacer","Timing","Hours","Savings","positive","Heading","getSaving","saving","Math","abs","Table","data","times","map","time","Object","keys","savings","hour","hi","si","title","h2","defaultState","hours","reducer","state","action","key","Error","Calculator","useReducer","dispatch","totalInvocations","oldCost","last","ceil","push","forEach","newCost","devCost","round","calcTimes","h1","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a11d912f.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n\n    background: white;\n\n    width: 90vw;\n    max-width: 500px;\n\n    border-radius: 7px;\n    box-shadow: 0 50px 100px rgba(50, 50, 93, 0.15),\n        0 15px 35px rgba(50, 50, 93, 0.2), 0 5px 15px rgba(0, 0, 0, 0.12);\n\n    @media (max-width: 520px) {\n        max-width: 90%;\n    }\n`;\n\nexport const InnerContainer = styled.div`\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n    padding: 23px 25px;\n`;\n\nexport const Item = styled.div`\n    display: flex;\n    flex-direction: column;\n\n    width: 100%;\n\n    margin-bottom: 10px;\n\n    &:last-of-type {\n        margin-bottom: 0;\n    }\n`;\n\nexport const Label = styled.label`\n    width: 100%;\n\n    color: #555;\n    text-align: left;\n    margin-bottom: 3px;\n`;\n\nexport const Input = styled.input`\n    position: relative;\n    z-index: 1;\n\n    background-image: none;\n    background-color: transparent;\n    box-shadow: none;\n    outline: none;\n\n    width: 100%;\n    box-sizing: border-box;\n    height: 40px;\n    line-height: 40px;\n    padding: 5px 10px;\n    font-size: 25px;\n\n    color: #666;\n\n    border: 2px solid #aaa;\n    border-radius: 7px;\n\n    transition: all 0.6s;\n\n    &:hover {\n        border-color: #9854f7;\n        color: #444;\n    }\n\n    &:focus {\n        border-color: #9854f7;\n        color: #444;\n    }\n`;\n\nexport const CurrencyInput = styled(Input)`\n    padding-left: 30px;\n`;\n\nexport const SuffixInput = styled.div`\n    position: relative;\n\n    &:after {\n        position: absolute;\n        color: #666;\n        content: '${(props) => props.suffix}';\n        height: 100%;\n        line-height: 40px;\n        font-size: 25px;\n        left: ${(props) => {\n            let padding = 15 * props.length;\n\n            if (props.length < 4) {\n                padding = 16 * props.length;\n            }\n\n            return `${10 + padding}px`;\n        }};\n    }\n`;\n\nexport const PrefixInput = styled.div`\n    position: relative;\n\n    &:after {\n        position: absolute;\n        color: #666;\n        content: '${(props) => props.suffix}';\n        height: 100%;\n        line-height: 40px;\n        font-size: 25px;\n        left: 12px;\n    }\n`;\n\n// #95F689 lightest green\n// #72F697 darker green\n// #5F93CD blue  15px per letter\n","import React from 'react';\n\nimport * as Styled from './styles';\n\nconst Form = ({\n    price,\n    invocations,\n    memory,\n    execution,\n    lifespan,\n    salary,\n    updateValue,\n}) => {\n    const getMonthSuffix = () => {\n        if (parseInt(lifespan, 10) === 1) {\n            return 'month';\n        }\n\n        return 'months';\n    };\n\n    return (\n        <Styled.Container>\n            <Styled.InnerContainer>\n                <Styled.Item>\n                    <Styled.Label htmlFor=\"price\">\n                        Price per GB Second\n                    </Styled.Label>\n                    <Styled.PrefixInput suffix=\"$\">\n                        <Styled.CurrencyInput\n                            id=\"price\"\n                            type=\"number\"\n                            min=\"0\"\n                            value={price}\n                            onChange={(e) => {\n                                updateValue('price', e.target.value);\n                            }}\n                        />\n                    </Styled.PrefixInput>\n                </Styled.Item>\n                <Styled.Item>\n                    <Styled.Label htmlFor=\"invocations\">\n                        Invocations per minute\n                    </Styled.Label>\n                    <Styled.Input\n                        id=\"invocations\"\n                        type=\"number\"\n                        step=\"1\"\n                        min=\"0\"\n                        value={invocations}\n                        onChange={(e) => {\n                            updateValue('invocations', e.target.value);\n                        }}\n                    />\n                </Styled.Item>\n                <Styled.Item>\n                    <Styled.Label htmlFor=\"memory\">\n                        Memory configuration\n                    </Styled.Label>\n                    <Styled.SuffixInput\n                        suffix=\"MB\"\n                        length={memory.toString().length}\n                    >\n                        <Styled.Input\n                            id=\"memory\"\n                            type=\"number\"\n                            step=\"1\"\n                            min=\"128\"\n                            max=\"10240\"\n                            value={memory}\n                            onChange={(e) => {\n                                updateValue('memory', e.target.value);\n                            }}\n                            onBlur={() => {\n                                if (memory < 128) {\n                                    updateValue('memory', 128);\n                                }\n\n                                if (memory > 10240) {\n                                    updateValue('memory', 10240);\n                                }\n                            }}\n                        />\n                    </Styled.SuffixInput>\n                </Styled.Item>\n                <Styled.Item>\n                    <Styled.Label htmlFor=\"execution\">\n                        Current execution time\n                    </Styled.Label>\n                    <Styled.SuffixInput\n                        suffix=\"ms\"\n                        length={execution.toString().length}\n                    >\n                        <Styled.Input\n                            id=\"execution\"\n                            type=\"number\"\n                            step=\"1\"\n                            min=\"0\"\n                            value={execution}\n                            onChange={(e) => {\n                                updateValue('execution', e.target.value);\n                            }}\n                            onBlur={() => {\n                                if (execution > 900000) {\n                                    updateValue('execution', 900000);\n                                }\n\n                                if (!execution || execution < 2) {\n                                    updateValue('execution', 100);\n                                }\n                            }}\n                        />\n                    </Styled.SuffixInput>\n                </Styled.Item>\n                <Styled.Item>\n                    <Styled.Label htmlFor=\"lifespan\">\n                        Lifespan of function\n                    </Styled.Label>\n                    <Styled.SuffixInput\n                        suffix={getMonthSuffix()}\n                        length={lifespan.toString().length}\n                    >\n                        <Styled.Input\n                            id=\"lifespan\"\n                            type=\"number\"\n                            step=\"1\"\n                            min=\"0\"\n                            value={lifespan}\n                            onChange={(e) => {\n                                updateValue('lifespan', e.target.value);\n                            }}\n                            onBlur={() => {\n                                if (!lifespan || lifespan < 0) {\n                                    updateValue('lifespan', 1);\n                                }\n                            }}\n                        />\n                    </Styled.SuffixInput>\n                </Styled.Item>\n                <Styled.Item>\n                    <Styled.Label htmlFor=\"salary\">\n                        Development cost per hour\n                    </Styled.Label>\n                    <Styled.PrefixInput suffix=\"$\">\n                        <Styled.CurrencyInput\n                            id=\"salary\"\n                            type=\"number\"\n                            step=\"1\"\n                            min=\"0\"\n                            value={salary}\n                            onChange={(e) => {\n                                updateValue('salary', e.target.value);\n                            }}\n                            onBlur={() => {\n                                if (!salary || salary < 0) {\n                                    updateValue('salary', 0);\n                                }\n                            }}\n                        />\n                    </Styled.PrefixInput>\n                </Styled.Item>\n            </Styled.InnerContainer>\n        </Styled.Container>\n    );\n};\n\nexport default Form;\n","import styled from 'styled-components';\n\nconst Item = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 45px;\n\n    box-sizing: border-box;\n    width: 110px;\n    padding: 3px 7px;\n\n    transition: all 0.6s;\n\n    span {\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n    }\n`;\n\nexport const Container = styled.div`\n    overflow: scroll;\n    max-width: 90vw;\n\n    margin-bottom: 40px;\n`;\n\nexport const Inner = styled.div`\n    display: grid;\n    grid-template-columns: 30px 80px 110px 110px 110px 110px 110px;\n`;\n\nexport const Column = styled.div`\n    display: grid;\n    grid-template-rows: ${(props) => {\n        let rows = '';\n\n        for (let i = 1; i <= props.count; i += 1) {\n            rows += ' auto';\n        }\n\n        return rows;\n    }};\n\n    width: 100%;\n    grid-gap: 2px;\n    font-size: 25px;\n\n    background: white;\n\n    div {\n        border-bottom: solid 1px #bbb;\n    }\n\n    div:last-child {\n        border-bottom: none;\n    }\n\n    &:last-child {\n        border-top-right-radius: 7px;\n        border-bottom-right-radius: 7px;\n    }\n`;\n\nexport const LeftColumn = styled.div`\n    display: grid;\n    grid-template-rows: 30px auto;\n`;\n\nexport const TimingColumn = styled(Column)`\n    border-top-left-radius: 7px;\n    border-bottom-left-radius: 7px;\n`;\n\nexport const LeftLabel = styled.span`\n    display: block;\n\n    font-size: 16px;\n    color: #555;\n\n    writing-mode: vertical-rl;\n    transform: rotate(180deg);\n\n    grid-row: 2/2;\n`;\n\nexport const Spacer = styled(Item)`\n    width: 80px;\n`;\n\nexport const Timing = styled(Item)`\n    font-size: 20px;\n\n    width: 80px;\n\n    font-size: 16px;\n    color: #555;\n`;\n\nexport const Hours = styled(Item)`\n    font-size: 16px;\n    color: #555;\n`;\n\nexport const Savings = styled(Item)`\n    color: ${(props) => (props.positive ? '#357a38' : '#f44336')};\n    &:hover {\n        color: #9854f7;\n    }\n`;\n\nexport const Heading = styled.div`\n    width: 660px;\n\n    padding-left: 110px;\n    margin-bottom: 7px;\n\n    font-size: 16px;\n    color: #555;\n\n    box-sizing: border-box;\n`;\n","import React from 'react';\n\nimport * as Styled from './styles';\n\nconst getSaving = (saving) => {\n    if (saving < 0) {\n        return `-$${Math.abs(saving)}`;\n    }\n\n    return `$${saving}`;\n};\n\nconst Table = ({ data }) => (\n    <Styled.Container>\n        <Styled.Heading>Hours spent optimising</Styled.Heading>\n        <Styled.Inner>\n            <Styled.LeftColumn>\n                <Styled.LeftLabel>New execution time</Styled.LeftLabel>\n            </Styled.LeftColumn>\n            <Styled.TimingColumn count={data.times.length}>\n                <Styled.Spacer />\n                {data.times.map((time) => (\n                    <Styled.Timing key={time}>\n                        <span>{time} ms</span>\n                    </Styled.Timing>\n                ))}\n            </Styled.TimingColumn>\n            {Object.keys(data.savings).map((hour, hi) => (\n                <Styled.Column key={hi} count={data.times.length}>\n                    <Styled.Hours>{hour} hour</Styled.Hours>\n                    {data.savings[hour].map((saving, si) => (\n                        <Styled.Savings\n                            positive={saving > 0}\n                            key={`${hi}-${si}`}\n                        >\n                            <span title={getSaving(saving)}>\n                                {getSaving(saving)}\n                            </span>\n                        </Styled.Savings>\n                    ))}\n                </Styled.Column>\n            ))}\n        </Styled.Inner>\n    </Styled.Container>\n);\n\nexport default Table;\n","import styled from 'styled-components';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const Heading = styled.h2`\n    margin-top: 30px;\n    margin-bottom: 20px;\n    color: #444;\n`;\n","import React, { useReducer } from 'react';\nimport Form from '../../components/Form';\nimport Table from '../../components/Table';\nimport { Heading } from './styles';\n\nconst defaultState = {\n    price: 0.0000166667,\n    invocations: 100,\n    memory: 1024,\n    execution: 200,\n    lifespan: 18,\n    salary: 25,\n    hours: [1, 2, 4, 8, 16],\n};\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case 'update':\n            return {\n                ...state,\n                [action.key]: action.value,\n            };\n        default:\n            throw new Error();\n    }\n};\n\nconst Calculator = () => {\n    const [state, dispatch] = useReducer(reducer, defaultState);\n\n    const updateValue = (key, value) => {\n        dispatch({\n            type: 'update',\n            key,\n            value,\n        });\n    };\n\n    const calcTimes = () => {\n        // 43800 minutes in a month\n        const totalInvocations = state.invocations * 43800 * state.lifespan;\n        const oldCost =\n            (state.price / 1000) *\n            (state.memory / 1024) *\n            state.execution *\n            totalInvocations;\n\n        const data = {\n            times: [],\n            savings: {},\n        };\n        let last = 0;\n\n        for (let i = 1; i < 10; i += 1) {\n            const time = Math.ceil(state.execution * ((10 - i) / 10));\n\n            if (time !== last) {\n                last = time;\n                data.times.push(time);\n            }\n        }\n\n        state.hours.forEach((hour) => {\n            const savings = data.times.map((time) => {\n                const newCost =\n                    (state.price / 1000) *\n                    (state.memory / 1024) *\n                    time *\n                    totalInvocations;\n                const devCost = hour * state.salary;\n\n                return Math.round(oldCost - newCost - devCost);\n            });\n\n            data.savings[hour] = savings;\n        });\n\n        return data;\n    };\n\n    const data = calcTimes();\n\n    return (\n        <>\n            <Form {...state} updateValue={updateValue} />\n            <Heading>Cost Savings</Heading>\n            <Table data={data} />\n        </>\n    );\n};\n\nexport default Calculator;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n    text-align: center;\n\n    height: 100%;\n\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n`;\n\nexport const Heading = styled.h1`\n    color: #444;\n    margin-top: 40px;\n    margin-bottom: 40px;\n    max-width: 500px;\n`;\n","import React from 'react';\n\nimport Calculator from './container/Calculator';\n\nimport * as Styled from './styles';\n\nfunction App() {\n    return (\n        <Styled.Container>\n            <Styled.Heading>\n                How much money will you save optimising your Lambda?\n            </Styled.Heading>\n            <Calculator />\n        </Styled.Container>\n    );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}